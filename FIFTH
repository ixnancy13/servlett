1. Database Setup

SQL Table:

CREATE DATABASE studentdb;

USE studentdb;

CREATE TABLE Student (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50),
    age INT,
    course VARCHAR(50)
);

üß© 2. Student Entity Class
package com.example.hibernateapp;

import jakarta.persistence.*;

@Entity
@Table(name = "Student")
public class Student {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @Column(name = "name")
    private String name;

    @Column(name = "age")
    private int age;

    @Column(name = "course")
    private String course;

    // Constructors
    public Student() {}

    public Student(String name, int age, String course) {
        this.name = name;
        this.age = age;
        this.course = course;
    }

    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public int getAge() { return age; }
    public void setAge(int age) { this.age = age; }

    public String getCourse() { return course; }
    public void setCourse(String course) { this.course = course; }

    @Override
    public String toString() {
        return "Student [id=" + id + ", name=" + name + ", age=" + age + ", course=" + course + "]";
    }
}

‚öôÔ∏è 3. Hibernate Configuration File (hibernate.cfg.xml)

Place this inside your project‚Äôs src/main/resources folder.

<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD 5.3//EN"
    "http://hibernate.org/dtd/hibernate-configuration-5.3.dtd">
<hibernate-configuration>
    <session-factory>

        <!-- Database connection settings -->
        <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/studentdb</property>
        <property name="hibernate.connection.username">root</property>
        <property name="hibernate.connection.password">your_password</property>

        <!-- Hibernate properties -->
        <property name="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</property>
        <property name="hibernate.hbm2ddl.auto">update</property>
        <property name="hibernate.show_sql">true</property>

        <!-- Mapping class -->
        <mapping class="com.example.hibernateapp.Student"/>

    </session-factory>
</hibernate-configuration>

üß∞ 4. Hibernate Utility Class

To create and manage the SessionFactory (used to get Hibernate sessions).

package com.example.hibernateapp;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class HibernateUtil {
    private static SessionFactory sessionFactory;

    static {
        try {
            sessionFactory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static SessionFactory getSessionFactory() {
        return sessionFactory;
    }
}

üîß 5. CRUD Operations (StudentCRUD.java)
package com.example.hibernateapp;

import org.hibernate.Session;
import org.hibernate.Transaction;
import java.util.List;

public class StudentCRUD {

    // CREATE
    public void addStudent(Student student) {
        Transaction tx = null;
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            tx = session.beginTransaction();
            session.save(student);
            tx.commit();
            System.out.println("‚úÖ Student added successfully!");
        } catch (Exception e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        }
    }

    // READ
    public void getStudents() {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            List<Student> list = session.createQuery("from Student", Student.class).list();
            list.forEach(System.out::println);
        }
    }

    // UPDATE
    public void updateStudent(int id, String newCourse) {
        Transaction tx = null;
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            tx = session.beginTransaction();
            Student student = session.get(Student.class, id);
            if (student != null) {
                student.setCourse(newCourse);
                session.update(student);
                System.out.println("‚úÖ Student updated!");
            } else {
                System.out.println("‚ùå Student not found!");
            }
            tx.commit();
        } catch (Exception e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        }
    }

    // DELETE
    public void deleteStudent(int id) {
        Transaction tx = null;
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            tx = session.beginTransaction();
            Student student = session.get(Student.class, id);
            if (student != null) {
                session.delete(student);
                System.out.println("üóëÔ∏è Student deleted!");
            } else {
                System.out.println("‚ùå Student not found!");
            }
            tx.commit();
        } catch (Exception e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        }
    }
}

üöÄ 6. Main Application (MainApp.java)
package com.example.hibernateapp;

public class MainApp {
    public static void main(String[] args) {

        StudentCRUD crud = new StudentCRUD();

        // Create
        Student s1 = new Student("Alice", 21, "Java");
        Student s2 = new Student("Bob", 22, "Python");
        crud.addStudent(s1);
        crud.addStudent(s2);

        // Read
        System.out.println("\nüìã List of Students:");
        crud.getStudents();

        // Update
        crud.updateStudent(1, "Spring Boot");

        // Delete
        crud.deleteStudent(2);

        // Final List
        System.out.println("\nüìã Updated List of Students:");
        crud.getStudents();
    }
}
